-- ============================================
-- CORRE√á√ÉO DE SEGURAN√áA RLS - BASEADA NA ESTRUTURA REAL
-- ============================================

-- CORRE√á√ïES CR√çTICAS: Habilitar RLS nas tabelas com pol√≠ticas mas RLS desabilitado
ALTER TABLE public.qa_test_cases ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.regime_urbanistico_consolidado ENABLE ROW LEVEL SECURITY;

-- HABILITAR RLS EM TABELAS SENS√çVEIS SEM PROTE√á√ÉO
ALTER TABLE public.messages ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.chat_memory ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.user_feedback ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.user_queries ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.sessions ENABLE ROW LEVEL SECURITY;

-- CRIAR POL√çTICAS SEGURAS PARA MESSAGES (baseado em session_id)
DROP POLICY IF EXISTS "Users can access messages from own sessions" ON public.messages;
CREATE POLICY "Users can access messages from own sessions" ON public.messages
    FOR ALL USING (
        session_id IN (
            SELECT id FROM public.chat_sessions WHERE user_id = auth.uid()
        )
    );

-- CRIAR POL√çTICAS PARA CHAT_MEMORY (baseado em session_id) 
DROP POLICY IF EXISTS "Users can access chat memory from own sessions" ON public.chat_memory;
CREATE POLICY "Users can access chat memory from own sessions" ON public.chat_memory
    FOR ALL USING (
        session_id IN (
            SELECT id::text FROM public.chat_sessions WHERE user_id = auth.uid()
        )
    );

-- POL√çTICAS PARA USER_FEEDBACK (j√° tem user_id)
DROP POLICY IF EXISTS "Users can view own feedback" ON public.user_feedback;
CREATE POLICY "Users can view own feedback" ON public.user_feedback
    FOR SELECT USING (auth.uid() = user_id);

DROP POLICY IF EXISTS "Users can insert own feedback" ON public.user_feedback;
CREATE POLICY "Users can insert own feedback" ON public.user_feedback
    FOR INSERT WITH CHECK (auth.uid() = user_id);

-- POL√çTICAS PARA USER_QUERIES (j√° tem user_id)
DROP POLICY IF EXISTS "Users can view own queries" ON public.user_queries;
CREATE POLICY "Users can view own queries" ON public.user_queries
    FOR SELECT USING (auth.uid() = user_id);

DROP POLICY IF EXISTS "Users can insert own queries" ON public.user_queries;
CREATE POLICY "Users can insert own queries" ON public.user_queries
    FOR INSERT WITH CHECK (auth.uid() = user_id);

-- VERIFICA√á√ÉO FINAL
SELECT 
    tablename,
    rowsecurity AS rls_enabled,
    CASE 
        WHEN rowsecurity THEN '‚úÖ RLS Habilitado'
        ELSE '‚ùå RLS Desabilitado'
    END AS status
FROM pg_tables 
WHERE schemaname = 'public' 
  AND tablename IN (
    'qa_test_cases',
    'regime_urbanistico_consolidado', 
    'messages',
    'chat_memory',
    'user_feedback',
    'user_queries',
    'sessions'
  )
ORDER BY tablename;

-- CONTAGEM DE POL√çTICAS POR TABELA
SELECT 
    tablename,
    COUNT(*) as policy_count
FROM pg_policies
WHERE schemaname = 'public'
  AND tablename IN (
    'qa_test_cases',
    'regime_urbanistico_consolidado',
    'messages',
    'chat_memory',
    'user_feedback',
    'user_queries'
  )
GROUP BY tablename
ORDER BY tablename;

-- MENSAGEM DE CONFIRMA√á√ÉO
SELECT 
    'üîí CORRE√á√ÉO DE SEGURAN√áA CONCLU√çDA' as status,
    'RLS habilitado em todas as tabelas cr√≠ticas' as message,
    'Pol√≠ticas baseadas na estrutura real das tabelas' as details;