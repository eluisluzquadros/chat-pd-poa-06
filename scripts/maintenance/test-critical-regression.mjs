#!/usr/bin/env node

/**
 * TESTE CR√çTICO - Verificar retrocesso ap√≥s integra√ß√£o v3
 */

import fetch from 'node-fetch';
import dotenv from 'dotenv';
import chalk from 'chalk';

dotenv.config({ path: '.env' });

const SUPABASE_URL = process.env.NEXT_PUBLIC_SUPABASE_URL || 'https://ngrqwmvuhvjkeohesbxs.supabase.co';
const ANON_KEY = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

async function testCriticalQueries() {
  console.log(chalk.red.bold('\nüö® TESTE DE RETROCESSO CR√çTICO\n'));
  
  const criticalQueries = [
    {
      query: "o que diz o artigo 75 da LUOS?",
      expected: "regime volum√©trico",
      type: "article"
    },
    {
      query: "altura m√°xima no bairro PETR√ìPOLIS",
      expected: "60m",
      type: "regime"
    },
    {
      query: "o que diz o artigo 1 da LUOS?",
      expected: "Lei de Uso e Ocupa√ß√£o",
      type: "article"
    }
  ];
  
  let failures = 0;
  
  for (const test of criticalQueries) {
    console.log(chalk.blue(`\nTestando: ${test.query}`));
    console.log(chalk.gray('‚îÄ'.repeat(50)));
    
    try {
      const response = await fetch(`${SUPABASE_URL}/functions/v1/agentic-rag`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${ANON_KEY}`
        },
        body: JSON.stringify({
          query: test.query,
          sessionId: `test-critical-${Date.now()}`,
          bypassCache: true
        })
      });
      
      // Check if response is HTML (error page)
      const contentType = response.headers.get('content-type');
      if (contentType && contentType.includes('text/html')) {
        console.log(chalk.red('‚ùå ERRO: Retornando HTML ao inv√©s de JSON!'));
        console.log(chalk.red('Function est√° com erro interno!'));
        failures++;
        continue;
      }
      
      const data = await response.json();
      
      if (data.error) {
        console.log(chalk.red('‚ùå ERRO:'), data.error);
        failures++;
      } else if (!data.response) {
        console.log(chalk.red('‚ùå Resposta vazia'));
        failures++;
      } else if (data.response.includes('n√£o encontrei') || data.response.includes('n√£o h√° informa√ß√µes')) {
        console.log(chalk.red('‚ùå Resposta gen√©rica'));
        console.log(chalk.gray(data.response.substring(0, 100)));
        failures++;
      } else if (test.expected && !data.response.toLowerCase().includes(test.expected.toLowerCase())) {
        console.log(chalk.yellow('‚ö†Ô∏è Resposta n√£o cont√©m esperado:'), test.expected);
        console.log(chalk.gray(data.response.substring(0, 150)));
        failures++;
      } else {
        console.log(chalk.green('‚úÖ OK'));
        console.log(chalk.gray(data.response.substring(0, 150)));
      }
      
    } catch (error) {
      console.log(chalk.red('‚ùå ERRO FATAL:'), error.message);
      failures++;
    }
  }
  
  console.log(chalk.blue('\n' + '‚ïê'.repeat(50)));
  
  if (failures === 0) {
    console.log(chalk.green.bold('‚úÖ TODOS OS TESTES PASSARAM!'));
  } else if (failures < criticalQueries.length) {
    console.log(chalk.yellow.bold(`‚ö†Ô∏è ${failures}/${criticalQueries.length} TESTES FALHARAM`));
    console.log(chalk.yellow('Sistema parcialmente funcional'));
  } else {
    console.log(chalk.red.bold(`‚ùå TODOS OS ${failures} TESTES FALHARAM!`));
    console.log(chalk.red.bold('SISTEMA COMPLETAMENTE QUEBRADO!'));
    console.log(chalk.red('\nüö® A√á√ÉO URGENTE NECESS√ÅRIA:'));
    console.log(chalk.red('1. Fazer rollback do agentic-rag'));
    console.log(chalk.red('2. Reverter integra√ß√£o v3'));
    console.log(chalk.red('3. Restaurar vers√£o anterior'));
  }
}

testCriticalQueries().catch(console.error);